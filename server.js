console.log('Starting all');

var wif = require('wif');
var ECPairFactory = require('ecpair').ECPairFactory;
var ecc = require('tiny-secp256k1');
var bitcoin =  require('bitcoinjs-lib');
var async = require('async');
const ECPair = ECPairFactory(ecc);

var winnerAdd = "13zb1hQbWVsc2S7ZTZnP2G4undNNpdh5so";
var offset =0;


// bound 2 chunk 1
var miniChunk =  [
    [ 51881467707308113920n, 51882208859188872478n ],
    [ 51882208859188872479n, 51882950011069631037n ],
    [ 51882950011069631038n, 51883691162950389596n ],
    [ 51883691162950389597n, 51884432314831148155n ],
    [ 51884432314831148156n, 51885173466711906714n ],
    [ 51885173466711906715n, 51885914618592665273n ],
    [ 51885914618592665274n, 51886655770473423832n ],
    [ 51886655770473423833n, 51887396922354182391n ],
    [ 51887396922354182392n, 51888138074234940950n ],
    [ 51888138074234940951n, 51888879226115699509n ],
    [ 51888879226115699510n, 51889620377996458068n ],
    [ 51889620377996458069n, 51890361529877216627n ],
    [ 51890361529877216628n, 51891102681757975186n ],
    [ 51891102681757975187n, 51891843833638733745n ],
    [ 51891843833638733746n, 51892584985519492304n ],
    [ 51892584985519492305n, 51893326137400250863n ],
    [ 51893326137400250864n, 51894067289281009422n ],
    [ 51894067289281009423n, 51894808441161767981n ],
    [ 51894808441161767982n, 51895549593042526540n ],
    [ 51895549593042526541n, 51896290744923285099n ],
    [ 51896290744923285100n, 51897031896804043658n ],
    [ 51897031896804043659n, 51897773048684802217n ],
    [ 51897773048684802218n, 51898514200565560776n ],
    [ 51898514200565560777n, 51899255352446319335n ],
    [ 51899255352446319336n, 51899996504327077894n ],
    [ 51899996504327077895n, 51900737656207836453n ],
    [ 51900737656207836454n, 51901478808088595012n ],
    [ 51901478808088595013n, 51902219959969353571n ],
    [ 51902219959969353572n, 51902961111850112130n ],
    [ 51902961111850112131n, 51903702263730870689n ],
    [ 51903702263730870690n, 51904443415611629248n ],
    [ 51904443415611629249n, 51905184567492387807n ],
    [ 51905184567492387808n, 51905925719373146366n ],
    [ 51905925719373146367n, 51906666871253904925n ],
    [ 51906666871253904926n, 51907408023134663484n ],
    [ 51907408023134663485n, 51908149175015422043n ],
    [ 51908149175015422044n, 51908890326896180602n ],
    [ 51908890326896180603n, 51909631478776939161n ],
    [ 51909631478776939162n, 51910372630657697720n ],
    [ 51910372630657697721n, 51911113782538456279n ],
    [ 51911113782538456280n, 51911854934419214838n ],
    [ 51911854934419214839n, 51912596086299973397n ],
    [ 51912596086299973398n, 51913337238180731956n ],
    [ 51913337238180731957n, 51914078390061490515n ],
    [ 51914078390061490516n, 51914819541942249074n ],
    [ 51914819541942249075n, 51915560693823007633n ],
    [ 51915560693823007634n, 51916301845703766192n ],
    [ 51916301845703766193n, 51917042997584524751n ],
    [ 51917042997584524752n, 51917784149465283310n ],
    [ 51917784149465283311n, 51918525301346041869n ],
    [ 51918525301346041870n, 51919266453226800428n ],
    [ 51919266453226800429n, 51920007605107558987n ],
    [ 51920007605107558988n, 51920748756988317546n ],
    [ 51920748756988317547n, 51921489908869076105n ],
    [ 51921489908869076106n, 51922231060749834664n ],
    [ 51922231060749834665n, 51922972212630593223n ],
    [ 51922972212630593224n, 51923713364511351782n ],
    [ 51923713364511351783n, 51924454516392110341n ],
    [ 51924454516392110342n, 51925195668272868900n ],
    [ 51925195668272868901n, 51925936820153627459n ],
    [ 51925936820153627460n, 51926677972034386018n ],
    [ 51926677972034386019n, 51927419123915144577n ],
    [ 51927419123915144578n, 51928160275795903136n ],
    [ 51928160275795903137n, 51928901427676661695n ],
    [ 51928901427676661696n, 51929642579557420254n ],
    [ 51929642579557420255n, 51930383731438178813n ],
    [ 51930383731438178814n, 51931124883318937372n ],
    [ 51931124883318937373n, 51931866035199695931n ],
    [ 51931866035199695932n, 51932607187080454490n ],
    [ 51932607187080454491n, 51933348338961213049n ],
    [ 51933348338961213050n, 51934089490841971608n ],
    [ 51934089490841971609n, 51934830642722730167n ],
    [ 51934830642722730168n, 51935571794603488726n ],
    [ 51935571794603488727n, 51936312946484247285n ],
    [ 51936312946484247286n, 51937054098365005844n ],
    [ 51937054098365005845n, 51937795250245764403n ],
    [ 51937795250245764404n, 51938536402126522962n ],
    [ 51938536402126522963n, 51939277554007281521n ],
    [ 51939277554007281522n, 51940018705888040080n ],
    [ 51940018705888040081n, 51940759857768798639n ],
    [ 51940759857768798640n, 51941501009649557198n ],
    [ 51941501009649557199n, 51942242161530315757n ],
    [ 51942242161530315758n, 51942983313411074316n ],
    [ 51942983313411074317n, 51943724465291832875n ],
    [ 51943724465291832876n, 51944465617172591434n ],
    [ 51944465617172591435n, 51945206769053349993n ],
    [ 51945206769053349994n, 51945947920934108552n ],
    [ 51945947920934108553n, 51946689072814867111n ],
    [ 51946689072814867112n, 51947430224695625670n ],
    [ 51947430224695625671n, 51948171376576384229n ],
    [ 51948171376576384230n, 51948912528457142788n ],
    [ 51948912528457142789n, 51949653680337901347n ],
    [ 51949653680337901348n, 51950394832218659906n ],
    [ 51950394832218659907n, 51951135984099418465n ],
    [ 51951135984099418466n, 51951877135980177024n ],
    [ 51951877135980177025n, 51952618287860935583n ],
    [ 51952618287860935584n, 51953359439741694142n ],
    [ 51953359439741694143n, 51954100591622452701n ],
    [ 51954100591622452702n, 51954841743503211260n ],
    [ 51954841743503211261n, 51955582895383969819n ]
  ]
  


function convertToHexString(num, length) {
    const hexString = num.toString(16);
    return hexString.padStart(length, '0');
  }


function run(chunkIndex){
    var found = false;

    // console.log(`Worker ${workerData.workerId}`);
    parentPort.postMessage(`Worker ${workerData.workerId}`);

    var hexString,privateKey,key;
    var start = BigInt(miniChunk[chunkIndex][0]);
    var end = BigInt(miniChunk[chunkIndex][1]);
    // console.log(start,end);
    for(start=start;start<=end;start++){
        hexString = convertToHexString(start, 64);
        privateKey = Buffer.from(hexString, 'hex')
        key = wif.encode(128, privateKey, true)

        const keyPair = ECPair.fromWIF(key,);
        var { address } = bitcoin.payments.p2pkh({ pubkey: keyPair.publicKey });
        // console.log(key,address);
        // parentPort.postMessage(`Worker ${workerData.workerId}: `+key);

        if(address == winnerAdd){
            parentPort.postMessage(`Worker ${workerData.workerId} solved.`);
            parentPort.postMessage(key);
            // console.log(address,key);
            found = true;
            return;
        }
        // start++;

        if(start == end){
            // console.log('NOT FOUND, reached top bound for %s}!',chunkIndex);
            parentPort.postMessage(`Worker ${workerData.workerId} completed.`);
            parentPort.postMessage('Took ' + new Date()-startTime =' ms');
            found=true;
            return;
        }
        if(found===true){
            // console.log('FOUND');
            // console.log(address,key);
            parentPort.postMessage(address + " " + key);
            return;
        }
    }
}


var startTime = new Date();
console.log(startTime,"start time");
//


const { Worker, isMainThread, parentPort, workerData } = require('worker_threads');

if (isMainThread) {
  // This is the main thread
  const numberOfWorkers = 10;

  for (let i = 0; i < numberOfWorkers; i++) {
    const worker = new Worker(__filename, {
      workerData: {
        workerId: i+offset,
        chunkIndex: i + offset
      },
    });

    worker.on('message', (message) => {
      console.log(message);
    });
  }
} else {
  // This is a worker thread
  run(workerData.chunkIndex);
}

console.log('Starting all');

var wif = require('wif');
var ECPairFactory = require('ecpair').ECPairFactory;
var ecc = require('tiny-secp256k1');
var bitcoin =  require('bitcoinjs-lib');
var async = require('async');
const ECPair = ECPairFactory(ecc);

var winnerAdd = "13zb1hQbWVsc2S7ZTZnP2G4undNNpdh5so";
var offset =0;


// bound 2 chunk 1
var miniChunk =  [
  [ 54187310716521807872n, 54187310716933326679n ],
  [ 54187310716933326680n, 54187310717344845487n ],
  [ 54187310717344845488n, 54187310717756364295n ],
  [ 54187310717756364296n, 54187310718167883103n ],
  [ 54187310718167883104n, 54187310718579401911n ],
  [ 54187310718579401912n, 54187310718990920719n ],
  [ 54187310718990920720n, 54187310719402439527n ],
  [ 54187310719402439528n, 54187310719813958335n ],
  [ 54187310719813958336n, 54187310720225477143n ],
  [ 54187310720225477144n, 54187310720636995951n ],
  [ 54187310720636995952n, 54187310721048514759n ],
  [ 54187310721048514760n, 54187310721460033567n ],
  [ 54187310721460033568n, 54187310721871552375n ],
  [ 54187310721871552376n, 54187310722283071183n ],
  [ 54187310722283071184n, 54187310722694589991n ],
  [ 54187310722694589992n, 54187310723106108799n ],
  [ 54187310723106108800n, 54187310723517627607n ],
  [ 54187310723517627608n, 54187310723929146415n ],
  [ 54187310723929146416n, 54187310724340665223n ],
  [ 54187310724340665224n, 54187310724752184031n ],
  [ 54187310724752184032n, 54187310725163702839n ],
  [ 54187310725163702840n, 54187310725575221647n ],
  [ 54187310725575221648n, 54187310725986740455n ],
  [ 54187310725986740456n, 54187310726398259263n ],
  [ 54187310726398259264n, 54187310726809778071n ],
  [ 54187310726809778072n, 54187310727221296879n ],
  [ 54187310727221296880n, 54187310727632815687n ],
  [ 54187310727632815688n, 54187310728044334495n ],
  [ 54187310728044334496n, 54187310728455853303n ],
  [ 54187310728455853304n, 54187310728867372111n ],
  [ 54187310728867372112n, 54187310729278890919n ],
  [ 54187310729278890920n, 54187310729690409727n ],
  [ 54187310729690409728n, 54187310730101928535n ],
  [ 54187310730101928536n, 54187310730513447343n ],
  [ 54187310730513447344n, 54187310730924966151n ],
  [ 54187310730924966152n, 54187310731336484959n ],
  [ 54187310731336484960n, 54187310731748003767n ],
  [ 54187310731748003768n, 54187310732159522575n ],
  [ 54187310732159522576n, 54187310732571041383n ],
  [ 54187310732571041384n, 54187310732982560191n ],
  [ 54187310732982560192n, 54187310733394078999n ],
  [ 54187310733394079000n, 54187310733805597807n ],
  [ 54187310733805597808n, 54187310734217116615n ],
  [ 54187310734217116616n, 54187310734628635423n ],
  [ 54187310734628635424n, 54187310735040154231n ],
  [ 54187310735040154232n, 54187310735451673039n ],
  [ 54187310735451673040n, 54187310735863191847n ],
  [ 54187310735863191848n, 54187310736274710655n ],
  [ 54187310736274710656n, 54187310736686229463n ],
  [ 54187310736686229464n, 54187310737097748271n ],
  [ 54187310737097748272n, 54187310737509267079n ],
  [ 54187310737509267080n, 54187310737920785887n ],
  [ 54187310737920785888n, 54187310738332304695n ],
  [ 54187310738332304696n, 54187310738743823503n ],
  [ 54187310738743823504n, 54187310739155342311n ],
  [ 54187310739155342312n, 54187310739566861119n ],
  [ 54187310739566861120n, 54187310739978379927n ],
  [ 54187310739978379928n, 54187310740389898735n ],
  [ 54187310740389898736n, 54187310740801417543n ],
  [ 54187310740801417544n, 54187310741212936351n ],
  [ 54187310741212936352n, 54187310741624455159n ],
  [ 54187310741624455160n, 54187310742035973967n ],
  [ 54187310742035973968n, 54187310742447492775n ],
  [ 54187310742447492776n, 54187310742859011583n ],
  [ 54187310742859011584n, 54187310743270530391n ],
  [ 54187310743270530392n, 54187310743682049199n ],
  [ 54187310743682049200n, 54187310744093568007n ],
  [ 54187310744093568008n, 54187310744505086815n ],
  [ 54187310744505086816n, 54187310744916605623n ],
  [ 54187310744916605624n, 54187310745328124431n ],
  [ 54187310745328124432n, 54187310745739643239n ],
  [ 54187310745739643240n, 54187310746151162047n ],
  [ 54187310746151162048n, 54187310746562680855n ],
  [ 54187310746562680856n, 54187310746974199663n ],
  [ 54187310746974199664n, 54187310747385718471n ],
  [ 54187310747385718472n, 54187310747797237279n ],
  [ 54187310747797237280n, 54187310748208756087n ],
  [ 54187310748208756088n, 54187310748620274895n ],
  [ 54187310748620274896n, 54187310749031793703n ],
  [ 54187310749031793704n, 54187310749443312511n ],
  [ 54187310749443312512n, 54187310749854831319n ],
  [ 54187310749854831320n, 54187310750266350127n ],
  [ 54187310750266350128n, 54187310750677868935n ],
  [ 54187310750677868936n, 54187310751089387743n ],
  [ 54187310751089387744n, 54187310751500906551n ],
  [ 54187310751500906552n, 54187310751912425359n ],
  [ 54187310751912425360n, 54187310752323944167n ],
  [ 54187310752323944168n, 54187310752735462975n ],
  [ 54187310752735462976n, 54187310753146981783n ],
  [ 54187310753146981784n, 54187310753558500591n ],
  [ 54187310753558500592n, 54187310753970019399n ],
  [ 54187310753970019400n, 54187310754381538207n ],
  [ 54187310754381538208n, 54187310754793057015n ],
  [ 54187310754793057016n, 54187310755204575823n ],
  [ 54187310755204575824n, 54187310755616094631n ],
  [ 54187310755616094632n, 54187310756027613439n ],
  [ 54187310756027613440n, 54187310756439132247n ],
  [ 54187310756439132248n, 54187310756850651055n ],
  [ 54187310756850651056n, 54187310757262169863n ],
  [ 54187310757262169864n, 54187310757673688671n ]
]
  


function convertToHexString(num, length) {
    const hexString = num.toString(16);
    return hexString.padStart(length, '0');
  }


function run(chunkIndex){
    var found = false;

    // console.log(`Worker ${workerData.workerId}`);
    

    var hexString,privateKey,key;
    var start = BigInt(miniChunk[chunkIndex][0]);
    var end = BigInt(miniChunk[chunkIndex][1]);
  parentPort.postMessage(`Worker ${workerData.workerId} : ${start} - ${end}`);
    // console.log(start,end);
    for(start=start;start<=end;start++){
        hexString = convertToHexString(start, 64);
        privateKey = Buffer.from(hexString, 'hex')
        key = wif.encode(128, privateKey, true)

        const keyPair = ECPair.fromWIF(key,);
        var { address } = bitcoin.payments.p2pkh({ pubkey: keyPair.publicKey });
        // console.log(key,address);
        // parentPort.postMessage(`Worker ${workerData.workerId}: `+key);

        if(address == winnerAdd){
            parentPort.postMessage(`Worker ${workerData.workerId} solved.`);
            parentPort.postMessage(key);
            parentPort.postMessage(`Took ${new Date()-startTime}  ms`);
            // console.log(address,key);
            found = true;
            return;
        }
        // start++;

        if(start == end){
            // console.log('NOT FOUND, reached top bound for %s}!',chunkIndex);
            parentPort.postMessage(`Worker ${workerData.workerId} completed.`);            
            parentPort.postMessage(`Took ${new Date()-startTime}  ms`);
            found=true;
            return;
        }
        if(found===true){
            // console.log('FOUND');
            // console.log(address,key);
            parentPort.postMessage(address + " " + key);
            return;
        }
    }
}


var startTime = new Date();
console.log(startTime,"start time");
//


const { Worker, isMainThread, parentPort, workerData } = require('worker_threads');

if (isMainThread) {
  // This is the main thread
  const numberOfWorkers = 10;

  for (let i = 0; i < numberOfWorkers; i++) {
    const worker = new Worker(__filename, {
      workerData: {
        workerId: i+offset,
        chunkIndex: i + offset
      },
    });

    worker.on('message', (message) => {
      console.log(message);
    });
  }
} else {
  // This is a worker thread
  run(workerData.chunkIndex);
}

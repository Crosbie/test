console.log('Starting all');

var wif = require('wif');
var ECPairFactory = require('ecpair').ECPairFactory;
var ecc = require('tiny-secp256k1');
var bitcoin =  require('bitcoinjs-lib');
var async = require('async');
const ECPair = ECPairFactory(ecc);

var winnerAdd = "13zb1hQbWVsc2S7ZTZnP2G4undNNpdh5so";

// var chunkIndex=0;

// 10% to 45% 387quadrillion values in each
var chunks = [
    [0x0000000000000000000000000000000000000000000000022000000000000000, 0x0000000000000000000000000000000000000000000000025f9d3fffffffffff],
    [0x0000000000000000000000000000000000000000000000025f9d400000000000, 0x0000000000000000000000000000000000000000000000029f36d3ffffffffff],
    [0x0000000000000000000000000000000000000000000000029f36d40000000000, 0x000000000000000000000000000000000000000000000002df6b13ffffffffff],
    [0x000000000000000000000000000000000000000000000002df6b140000000000, 0x0000000000000000000000000000000000000000000000031f6383ffffffffff],
    [0x0000000000000000000000000000000000000000000000031f63840000000000, 0x0000000000000000000000000000000000000000000000035f5e53ffffffffff],
    [0x0000000000000000000000000000000000000000000000035f5e540000000000, 0x0000000000000000000000000000000000000000000000039f55b3ffffffffff],
    [0x0000000000000000000000000000000000000000000000039f55b40000000000, 0x000000000000000000000000000000000000000000000003df4d13ffffffffff],
    [0x000000000000000000000000000000000000000000000003df4d140000000000, 0x0000000000000000000000000000000000000000000000041f4483ffffffffff],
    [0x0000000000000000000000000000000000000000000000041f44840000000000, 0x0000000000000000000000000000000000000000000000045f3df3ffffffffff],
    [0x0000000000000000000000000000000000000000000000045f3df40000000000, 0x0000000000000000000000000000000000000000000000049f3763ffffffffff]
  ];

  var endChunks =[
    [0x000000000000000000000000000000000000000000000002d000000000000000, 0x000000000000000000000000000000000000000000000002d00000000084e3df],
    [0x000000000000000000000000000000000000000000000002d00000000084e3e0, 0x000000000000000000000000000000000000000000000002d000000000f9c7be],
    [0x000000000000000000000000000000000000000000000002d000000000f9c7bf, 0x000000000000000000000000000000000000000000000002d00000000154519d],
    [0x000000000000000000000000000000000000000000000002d00000000154519e, 0x000000000000000000000000000000000000000000000002d000000001a3267c],
    [0x000000000000000000000000000000000000000000000002d000000001a3267d, 0x000000000000000000000000000000000000000000000002d0000000020e0bfa],
    [0x000000000000000000000000000000000000000000000002d0000000020e0bfb, 0x000000000000000000000000000000000000000000000002d000000002b8e17e],
    [0x000000000000000000000000000000000000000000000002d000000002b8e17f, 0x000000000000000000000000000000000000000000000002d00000000313b733],
    [0x000000000000000000000000000000000000000000000002d00000000313b734, 0x000000000000000000000000000000000000000000000002d000000003ce9c11],
    [0x000000000000000000000000000000000000000000000002d000000003ce9c12, 0x000000000000000000000000000000000000000000000002d00000000429724f],
    [0x000000000000000000000000000000000000000000000002d000000004297250, 0x000000000000000000000000000000000000000000000002d000000004e449ed]
  ]
  


function convertToHexString(num, length) {
    const hexString = num.toString(16);
    return hexString.padStart(length, '0');
  }


function run(chunkIndex){
    var found = false;

    // console.log(`Worker ${workerData.workerId}`);
    parentPort.postMessage(`Worker ${workerData.workerId}`);

    var hexString,privateKey,key;
    var start = BigInt(endChunks[chunkIndex][0]);
    var end = BigInt(endChunks[chunkIndex][1]);
    console.log(start,end);
    for(start=start;start<end;start++){
        hexString = convertToHexString(start, 64);
        privateKey = Buffer.from(hexString, 'hex')
        key = wif.encode(128, privateKey, true)

        const keyPair = ECPair.fromWIF(key,);
        var { address } = bitcoin.payments.p2pkh({ pubkey: keyPair.publicKey });
        //console.log(key,address);
        //parentPort.postMessage(`Worker ${workerData.workerId}: `+key);

        if(address == winnerAdd){
            console.log('SOLVED');
            console.log(address,key);
            found = true;
        }
        // start++;

        if(start == end){
            console.log('NOT FOUND, reached top bound for %s}!',chunkIndex);
            parentPort.postMessage(`Worker ${workerData.workerId} completed.`);
            found=true;
            return cb(null,address+" "+key);
        }
    }
}



// run()


const { Worker, isMainThread, parentPort, workerData } = require('worker_threads');

if (isMainThread) {
  // This is the main thread
  const numberOfWorkers = 5;

  for (let i = 0; i <= numberOfWorkers; i++) {
    const worker = new Worker(__filename, {
      workerData: {
        workerId: i,
        chunkIndex: i+5
      },
    });

    worker.on('message', (message) => {
      console.log(message);
    });
  }
} else {
  // This is a worker thread
  run(workerData.chunkIndex);
}
